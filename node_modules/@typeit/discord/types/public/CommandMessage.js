"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.CommandMessage = void 0;
const discord_js_1 = require("discord.js");
const __1 = require("../..");
class CommandMessage extends discord_js_1.Message {
    static create(message, command) {
        const commandMessage = message;
        commandMessage.infos = command.commandInfos.infos;
        commandMessage.prefix = command.commandInfos.prefix;
        commandMessage.argsRules = command.commandInfos.argsRules;
        commandMessage.commandName = command.commandInfos.commandName;
        commandMessage.description = command.commandInfos.description;
        commandMessage.discord = command.linkedDiscord.discordInfos;
        commandMessage.args = {};
        return commandMessage;
    }
    static parseArgs(expression, message) {
        const excludeSpecialChar = /[^\w]/gi;
        const splitSpaces = /\s{1,}/g;
        const originalArgsNames = expression[1].source.match(__1.Client.variablesExpression) || undefined;
        const argsValues = message.content.replace(expression[0].regex, "").split(splitSpaces).filter(i => i);
        if (originalArgsNames) {
            originalArgsNames.map((argName, index) => {
                const normalized = argName.replace(excludeSpecialChar, "").trim();
                const value = argsValues[index];
                const numberValue = Number(value);
                message.args[normalized] = Number.isNaN(numberValue) || !Number.isSafeInteger(numberValue) ? value : numberValue;
            });
        }
        else {
            // if no arg names present, args = the regex group results.
            message.args = expression[0].regex.exec(message.content);
        }
    }
}
exports.CommandMessage = CommandMessage;
//# sourceMappingURL=CommandMessage.js.map